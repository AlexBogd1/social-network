{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","serviceWorker.ts","redux/state.tsx","components/Header/Header.tsx","components/NavBar/NavBar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialodsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","App.tsx","index.tsx","components/NavBar/NavBar.module.css","components/Dialogs/Dialogs.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","rerenderEntireTree","state","profilePage","posts","id","message","likesCount","newPostText","dialogsPage","dialogs","name","messages","addPost","newPost","push","updateNewPostText","newText","Header","className","style","header","src","NavBar","nav","item","to","activeClassName","active","Post","props","MyPosts","postsElements","map","p","newPostElement","useRef","postsBlock","ref","value","onChange","current","text","updatePostText","onClick","ProfileInfo","img","profile","Profile","DialogItem","path","dialog","Message","Dialogs","dialogsElements","d","messagesElements","m","dialogsItems","App","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.61bd48c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2wHp-\",\"posts\":\"MyPosts_posts__2omky\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__GPZQB\",\"img\":\"ProfileInfo_img__3nKPR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Ywtq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__IWeNx\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Post is cached for offline use.\" message.\n              console.log('Post is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {PostType} from \"../components/Profile/MyPosts/Post/Post\";\r\nimport {DialogItemType} from \"../components/Dialogs/DialogItem/DialodsItem\";\r\nimport {MessageType} from \"../components/Dialogs/Message/Message\";\r\n\r\nlet rerenderEntireTree = (state: StateType) => {\r\n\r\n}\r\n\r\nexport type StateType = {\r\n    profilePage: {\r\n        posts: Array<PostType>,\r\n        newPostText: string\r\n    },\r\n    dialogsPage: {\r\n        messages: Array<MessageType>\r\n        dialogs: Array<DialogItemType>\r\n    }\r\n}\r\n\r\nexport let state = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: 1, message: 'Hi? how are you', likesCount: 12},\r\n            {id: 2, message: 'It is my first post', likesCount: 11},\r\n            {id: 3, message: 'It is my second post', likesCount: 15},\r\n        ],\r\n        newPostText: 'Hello from state',\r\n    },\r\n    dialogsPage: {\r\n        dialogs: [\r\n            {id: 1, name: 'Dimych'},\r\n            {id: 2, name: 'Andrey'},\r\n            {id: 3, name: 'Sveta'},\r\n            {id: 4, name: 'Victor'},\r\n            {id: 5, name: 'Alex'},\r\n            {id: 6, name: 'Valera'},\r\n        ],\r\n        messages: [\r\n            {id: 1, message: 'Hi'},\r\n            {id: 2, message: 'How is your it-kamasutra?'},\r\n            {id: 3, message: 'Yo'},\r\n            {id: 4, message: 'Yo'},\r\n            {id: 5, message: 'Yo'},\r\n        ],\r\n    },\r\n\r\n}\r\n\r\nexport let addPost = () => {\r\n    let newPost: PostType = {\r\n        id: 5,\r\n        message: state.profilePage.newPostText,\r\n        likesCount: 0,\r\n    };\r\n    state.profilePage.posts.push(newPost);\r\n    state.profilePage.newPostText = '';\r\n    rerenderEntireTree(state);\r\n}\r\n\r\nexport let updateNewPostText = (newText: string) => {\r\n    state.profilePage.newPostText = newText;\r\n    rerenderEntireTree(state);\r\n}\r\n\r\nexport const subscribe = (observer: (state: StateType) => void) =>{\r\n    rerenderEntireTree = observer;\r\n}\r\n\r\nexport default state","import React from 'react';\r\nimport style from './Header.module.css';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={style.header}>\r\n            <img src='https://autodoktor.com.ua/wp-content/uploads/Logo/Total-logo-earth-1024x768.png'/>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\nimport style from './NavBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <div className={style.item}>\r\n                <NavLink to='/profile' activeClassName = {style.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/dialogs' activeClassName = {style.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/news' activeClassName = {style.active}>News</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/music' activeClassName = {style.active}>Music</NavLink>\r\n            </div>\r\n            <div className={style.item}>\r\n                <NavLink to='/settings' activeClassName = {style.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport style from './Post.module.css';\r\n\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img src='https://static8.depositphotos.com/1207999/1027/i/450/depositphotos_10275824-stock-photo-business-man-avatar-in-suit.jpg' />\r\n            {props.message}\r\n            <div>\r\n                {`like ${props.likesCount}`}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {useRef} from \"react\";\r\nimport style from './MyPosts.module.css';\r\nimport Post, {PostType} from \"./Post/Post\";\r\n\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: () => void\r\n    newPostText: string\r\n    updatePostText: (newText: string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n\r\n\r\n    let postsElements =\r\n        props.posts.map(p => {\r\n            return <Post id={p.id} message={p.message} likesCount={p.likesCount}/>\r\n        })\r\n\r\n    const newPostElement = useRef<HTMLTextAreaElement>(null)\r\n\r\n    let addPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    const onChangeText = () => {\r\n        if (newPostElement.current) {\r\n            let text = newPostElement.current.value;\r\n            props.updatePostText(text);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea ref={newPostElement} value={props.newPostText} onChange={onChangeText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>Add post</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport style from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return (\r\n        <div >\r\n            <div>\r\n                <img className={style.img}\r\n                     src='https://www.metoffice.gov.uk/binaries/content/gallery/metofficegovuk/hero-images/advice/maps-satellite-images/satellite-image-of-globe.jpg'/>\r\n            </div>\r\n            <div className={style.profile}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport style from './Profile.module.css';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {PostType} from \"./MyPosts/Post/Post\";\r\nimport {addPost} from \"../../redux/state\";\r\n\r\n\r\ntype ProfileType = {\r\n    profilePage: {\r\n        posts: Array<PostType>,\r\n        newPostText: string,\r\n    }\r\n    addPost: () => void\r\n    updatePostText: (newText: string) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfileType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo/>\r\n            <MyPosts addPost={props.addPost} posts={props.profilePage.posts} newPostText={props.profilePage.newPostText} updatePostText ={props.updatePostText}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport style from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={style.dialog + ' ' + style.active}>\r\n            <NavLink activeClassName = {style.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport style from './../Dialogs.module.css'\r\n\r\n\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={style.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem, {DialogItemType} from \"./DialogItem/DialodsItem\";\r\nimport Message, {MessageType} from \"./Message/Message\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogItemType>\r\n    messages: Array<MessageType>\r\n\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    let dialogsElements = props.dialogs\r\n        .map(d => {\r\n            return <DialogItem name={d.name} id={d.id}/>\r\n        })\r\n\r\n    let messagesElements = props.messages\r\n        .map(m => {\r\n            return <Message id={m.id} message={m.message}/>\r\n        })\r\n\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport NavBar from './components/NavBar/NavBar';\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs, {DialogsType} from \"./components/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {PostType} from \"./components/Profile/MyPosts/Post/Post\";\nimport {DialogItemType} from \"./components/Dialogs/DialogItem/DialodsItem\";\nimport {MessageType} from \"./components/Dialogs/Message/Message\";\n\ntype AppType = {\n    state: {\n        profilePage: {\n            posts: Array<PostType>,\n            newPostText: string\n        },\n        dialogsPage: {\n            dialogs: Array<DialogItemType>\n            messages: Array<MessageType>\n        }\n    }\n    addPost: () => void\n    updatePostText: (newText: string) => void\n}\n\n\nconst App = (props: AppType) => {\n\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <NavBar/>\n                <div className='app-wrapper-content'>\n                    {/*<Route path='/dialogs' component={Dialogs}/>*/}\n                    {/*<Route path='/profile' component={Profile}/>*/}\n                    {/*<Route path='/news' component={News}/>*/}\n                    {/*<Route path='/music' component={Music}/>*/}\n                    {/*<Route path='/settings' component={Settings}/>*/}\n\n                    <Route path='/dialogs'\n                           render={() => <Dialogs\n                               dialogs={props.state.dialogsPage.dialogs}\n                               messages={props.state.dialogsPage.messages}\n\n                           />}/>\n                    <Route path='/profile'\n                           render={() => <Profile\n                               profilePage={props.state.profilePage}\n                               addPost={props.addPost}\n                               updatePostText = {props.updatePostText}\n                           />}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\n\nexport default App;\n","import React from 'react';\nimport * as serviceWorker from './serviceWorker';\nimport state, {addPost, StateType, subscribe, updateNewPostText} from './redux/state'\n\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nexport const rerenderEntireTree = (state: StateType) => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App addPost={addPost} state={state} updatePostText={updateNewPostText}/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree(state);\nsubscribe(rerenderEntireTree);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__QFuFa\",\"item\":\"NavBar_item__2ZrOd\",\"active\":\"NavBar_active__22GIs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__g7C3c\",\"dialogsItems\":\"Dialogs_dialogsItems__gNl5t\",\"active\":\"Dialogs_active__1C3cm\",\"dialog\":\"Dialogs_dialog__8p-cM\",\"messages\":\"Dialogs_messages__yWIYX\",\"message\":\"Dialogs_message__1GguU\"};"],"sourceRoot":""}