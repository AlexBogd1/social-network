{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","s","target","ProfileInfo","profile","console","log","className","style","src","photos","large","alt","aboutMe","fullName","contacts","facebook","instagram","Preloader","Post","item","message","likesCount","maxLengthVal","maxLengthValidator","MyPosts","React","memo","postsElements","posts","map","p","key","id","postsBlock","MyPostFormRedux","onSubmit","propsForm","addPost","post","reduxForm","form","handleSubmit","Field","name","placeholder","component","FormFieldTextarea","validate","required","MyPostsContainer","connect","store","profilePage","dispatch","addPostActionCreator","Profile","userProfile","ProfileContainer","userID","this","match","params","userId","history","push","setMyUserProfile","getStatus","Component","compose","isAuth","auth","withRouter","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,oBCA/DD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,+HC0DVC,EApDgB,SAACC,GAA8B,IAAD,EAGzBC,oBAAS,GAHgB,mBAGlDC,EAHkD,KAGxCC,EAHwC,OAI7BF,mBAASD,EAAMI,QAJc,mBAIlDA,EAJkD,KAI1CC,EAJ0C,KAMzDC,qBAAU,WACND,EAAUL,EAAMI,UAClB,CAACJ,EAAMI,SAmBL,OACI,8BAESF,GACD,6BACI,0BAAMK,cArBD,WACrBJ,GAAY,KAoB4CC,GAAU,UAGtDF,GACA,6BACI,2BAAOM,WAAW,EACXC,OAvBA,WACvBN,GAAY,GACZH,EAAMU,aAAaN,IAsBIO,MAAOP,EACPQ,SApBJ,SAACC,GACpB,IAAIC,EAAID,EAAEE,OAAOJ,MACjBN,EAAUS,SCgBHE,EAhCK,SAAChB,GAA4B,IAAD,UAE5C,OAAKA,EAAMiB,SAGXC,QAAQC,IAAInB,EAAMiB,SAEd,6BAEI,yBAAKG,UAAWC,IAAMJ,SAClB,yBACIK,IAAG,UAAEtB,EAAMiB,eAAR,aAAE,EAAeM,OAAOC,MAC3BC,IAAK,YAGT,kBAAC,EAAD,CAAwBrB,OAAQJ,EAAMI,OAAQM,aAAcV,EAAMU,eAElE,oDACeV,EAAMiB,eADrB,aACe,EAAeS,SAE9B,wDACmB1B,EAAMiB,eADzB,aACmB,EAAeU,UAElC,uDACkB3B,EAAMiB,eADxB,aACkB,EAAeW,SAASC,SAAS,6BADnD,2BAEmB7B,EAAMiB,eAFzB,aAEmB,EAAeW,SAASE,cAtB5C,kBAACC,EAAA,EAAD,O,4CCSAC,EAdF,SAAChC,GACV,OACI,yBAAKoB,UAAWC,IAAMY,MAClB,yBAAKR,IAAK,OAAQH,IAAI,4HACrBtB,EAAMkC,QACP,4CACalC,EAAMmC,e,kCCA3BC,EAAeC,YAAmB,IAEhCC,EAAUC,IAAMC,MAAK,SAACxC,GACxBkB,QAAQC,IAAI,UACZ,IAAIsB,EACAzC,EAAM0C,MAAMC,KAAI,SAAAC,GACZ,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAEE,GAAKF,EAAEV,QAASY,GAAIF,EAAEE,GAAIZ,QAASU,EAAEV,QAASC,WAAYS,EAAET,gBAQxF,OAEI,yBAAKf,UAAWC,IAAM0B,YAClB,wCACA,kBAACC,EAAD,CAAiBC,SATX,SAACC,GACXlD,EAAMmD,QAAQD,EAAUE,SASpB,yBAAKhC,UAAWC,IAAMqB,OACjBD,OA0BXO,EAAkBK,YAA0B,CAACC,KAAM,cAAjCD,EAlBwC,SAACrD,GAE7D,OAAO,0BAAMiD,SAAUjD,EAAMuD,cACzB,6BACI,kBAACC,EAAA,EAAD,CAAOC,KAAQ,OACRC,YAAc,gBACdC,UAAaC,IACbC,SAAY,CAACC,IAAS1B,MAIjC,6BACI,iDAQGE,I,QCzCAyB,EAFUC,aAZD,SAACC,GACrB,MAAO,CACHvB,MAAOuB,EAAMC,YAAYxB,UAIN,SAACyB,GACxB,MAAO,CACHhB,QAAS,SAACC,GAAD,OAAkBe,EAASC,YAAqBhB,QAIxCY,CAA4C1B,GCJtD+B,EAZC,SAACrE,GAEb,OACI,6BACI,kBAAC,EAAD,CAAaiB,QAAWjB,EAAMsE,YACjBlE,OAAQJ,EAAMI,OACdM,aAAcV,EAAMU,eACjC,kBAAC,EAAD,Q,sBC2BN6D,E,kLAGE,IAAIC,EAASC,KAAKzE,MAAM0E,MAAMC,OAAOH,OAChCA,IACDA,EAAS,GAAGC,KAAKzE,MAAM4E,SAEnBH,KAAKzE,MAAM6E,QAAQC,KAAK,UAIhCL,KAAKzE,MAAM+E,iBAAiBP,GAC5BC,KAAKzE,MAAMgF,UAAUR,K,+BAIrB,OACI,kBAAC,EAAYC,KAAKzE,W,GAjBCuC,IAAM0C,WAuCtBC,sBAAQlB,aATD,SAACC,GAAD,MAA4B,CAC9CK,YAAaL,EAAMC,YAAYI,YAC/Ba,OAAQlB,EAAMmB,KAAKD,OACnBP,OAAQX,EAAMmB,KAAKR,OACnBxE,OAAQ6D,EAAMC,YAAY9D,UAKkB,CAAC2E,qBAAkBC,cAAWtE,mBAAgB2E,IAAWC,IAA1FJ,CAA4GX","file":"static/js/3.2cbd9eb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__1-sub\",\"img\":\"ProfileInfo_img__24zfr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BvJU\",\"posts\":\"MyPosts_posts__33kqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__13Y1z\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let s = e.target.value\r\n        setStatus(s)\r\n    }\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    !editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode}>{status || '-----'}</span>\r\n                    </div>}\r\n                {\r\n                    editMode &&\r\n                    <div>\r\n                        <input autoFocus={true}\r\n                               onBlur={deactivateEditMode}\r\n                               value={status}\r\n                               onChange={onStatusChange}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport style from './ProfileInfo.module.css';\r\nimport {UserProfileType} from \"../ProfileContainer\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    console.log(props.profile)\r\n    return (\r\n        <div>\r\n\r\n            <div className={style.profile}>\r\n                <img\r\n                    src={props.profile?.photos.large}\r\n                    alt={'profile'}\r\n                />\r\n                {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n                <div>\r\n                    About Me: {props.profile?.aboutMe}\r\n                </div>\r\n                <div>\r\n                    My full name: {props.profile?.fullName}\r\n                </div>\r\n                <div>\r\n                    My facebook: {props.profile?.contacts.facebook}<br/>\r\n                    My instagram: {props.profile?.contacts.instagram}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport style from './Post.module.css';\r\n\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img alt={'post'} src='https://static8.depositphotos.com/1207999/1027/i/450/depositphotos_10275824-stock-photo-business-man-avatar-in-suit.jpg' />\r\n            {props.message}\r\n            <div>\r\n                {`like ${props.likesCount}`}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport style from './MyPosts.module.css';\r\nimport Post, {PostType} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthValidator, required} from \"../../../utils/validators/validators\";\r\nimport {FormFieldTextarea} from \"../../../utils/formControls/FormsControls\";\r\n\r\n\r\nexport type MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (post: string) => void\r\n}\r\n\r\nexport type MyPostFormType = {\r\n    post: string\r\n}\r\n\r\nlet maxLengthVal = maxLengthValidator(15)\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log(\"render\")\r\n    let postsElements =\r\n        props.posts.map(p => {\r\n            return <Post key={p.id + p.message} id={p.id} message={p.message} likesCount={p.likesCount}/>\r\n        })\r\n\r\n    let addPost = (propsForm: MyPostFormType) => {\r\n        props.addPost(propsForm.post);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostFormRedux onSubmit = {addPost}/>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<MyPostFormType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name = {'post'}\r\n                   placeholder = 'enter message'\r\n                   component = {FormFieldTextarea}\r\n                   validate = {[required,maxLengthVal]}\r\n\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nconst MyPostFormRedux = reduxForm<MyPostFormType>({form: 'myPostForm'})(MyPostForm)\r\n\r\nexport default MyPosts;","import {addPostActionCreator, AddPostActionType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreType} from \"../../../redux/redux-store\";\r\n\r\n// type MyPostsContainerType = {\r\n//     profilePage:  ProfilePageType\r\n//     dispatch: (action: AddPostActionType) => void\r\n// }\r\n\r\nconst mapStateToProps = (store: ReduxStoreType) => {\r\n    return {\r\n        posts: store.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action:  AddPostActionType) => void) => {\r\n    return {\r\n        addPost: (post: string) => dispatch(addPostActionCreator(post)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfilePageType} from \"./ProfileContainer\";\r\n\r\n\r\nconst Profile = (props: UserProfilePageType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.userProfile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreType} from \"../../redux/redux-store\";\r\nimport {UsersPhotoApiType} from \"../Users/UsersContainer\";\r\nimport {getStatus, setMyUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nexport type UserProfileContactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe: string\r\n    contacts: UserProfileContactsType\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: UsersPhotoApiType\r\n    userId: number\r\n}\r\n\r\nexport type UserProfilePageType = {\r\n    userProfile: UserProfileType | null\r\n    userId: number\r\n    isAuth: boolean\r\n    status: string\r\n    setMyUserProfile: (userID: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userID = this.props.match.params.userID;\r\n        if (!userID) {\r\n            userID = ''+this.props.userId;\r\n            if(!userID) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setMyUserProfile(userID);\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} />\r\n        )\r\n    }\r\n\r\n}\r\ntype PathParamsType = {\r\n    userID: string,\r\n}\r\n\r\n// RouteComponentProps необходимо для оборачивания компоненты для withRouter\r\ntype PropsType = RouteComponentProps<PathParamsType> & UserProfilePageType\r\n\r\n\r\nlet mapStateToProps = (store: ReduxStoreType) => ({\r\n    userProfile: store.profilePage.userProfile,\r\n    isAuth: store.auth.isAuth,\r\n    userId: store.auth.userId,\r\n    status: store.profilePage.status\r\n})\r\n\r\n\r\n// compose()() - принимает функции, кот оборачивают нашу комп в обр порядке и саму компоненту(т.е. наша компонента прогоняется от withAuthRedirect до посл connect и возвр HOC с результатом цепочки)\r\nexport default compose(connect(mapStateToProps, {setMyUserProfile, getStatus, updateStatus}), withRouter,withAuthRedirect)(ProfileContainer) as React.ComponentType\r\n\r\n\r\n\r\n//let RedirectAuthComponent = withAuthRedirect<PropsType>(ProfileContainer);\r\n// let mapStateToPropsForRedirect = (store: ReduxStoreType) => ({\r\n//     isAuth: store.auth.isAuth,\r\n// })\r\n//\r\n// let RedirectComponentWithAuth = connect(mapStateToPropsForRedirect)(RedirectAuthComponent);\r\n//export default connect(mapStateToProps, {setMyUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}