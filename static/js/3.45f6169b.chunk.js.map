{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","s","target","ProfileDataFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","validate","component","FormFieldInput","type","FormFieldTextarea","profile","contacts","Object","keys","map","cont","className","style","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","aboutMe","lookingForAJobDescription","a","key","contactTitle","contactValue","Contact","ProfileInfo","Preloader","photos","large","src","UserPhoto","alt","avatar","files","savePhoto","initialValues","formData","saveProfile","Post","item","message","likesCount","maxLengthVal","maxLengthValidator","MyPosts","React","memo","console","log","postsElements","posts","p","id","postsBlock","MyPostFormRedux","propsForm","addPost","post","required","MyPostsContainer","connect","store","profilePage","dispatch","addPostActionCreator","Profile","userProfile","ProfileContainer","userID","this","match","params","userId","history","push","setMyUserProfile","getStatus","refreshProfile","prevProps","Component","compose","isAuth","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.45f6169b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__1-sub\",\"img\":\"ProfileInfo_img__24zfr\",\"avatar\":\"ProfileInfo_avatar__37NyP\",\"contacts\":\"ProfileInfo_contacts__1npzD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BvJU\",\"posts\":\"MyPosts_posts__33kqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__13Y1z\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let s = e.target.value\r\n        setStatus(s)\r\n    }\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    !editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={activateEditMode}>{status || '-----'}</span>\r\n                    </div>}\r\n                {\r\n                    editMode &&\r\n                    <div>\r\n                        <input autoFocus={true}\r\n                               onBlur={deactivateEditMode}\r\n                               value={status}\r\n                               onChange={onStatusChange}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","\r\nimport React from 'react'\r\nimport style from './ProfileInfo.module.css';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { FormFieldInput, FormFieldTextarea } from '../../../utils/formControls/FormsControls'\r\nimport { UserProfileContactsType, UserProfileType } from \"../ProfileContainer\"\r\nimport { Contact } from './../ProfileInfo/ProfileInfo'\r\nimport { count } from 'console';\r\n\r\nexport type ProfileFormDataType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType, { profile: UserProfileType }> & { profile: UserProfileType }> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div><button>save</button></div>\r\n        <div>\r\n            Full name: <Field placeholder=\"Full Name\" name=\"fullName\" validate={[]} component={FormFieldInput} />\r\n        </div>\r\n        <div>\r\n            <div>Looking for a job:</div> \r\n            <Field name=\"lookingForAJob\" type=\"checkbox\" validate={[]} component={FormFieldInput} />\r\n        </div>\r\n        <div>\r\n           <div>About Me:</div> \r\n            <Field placeholder='About Me' name=\"aboutMe\"  validate={[]} component={FormFieldTextarea} />\r\n        </div>\r\n\r\n        <div>\r\n            <div>My professional skills:</div> <Field placeholder='My professional skills' name=\"lookingForAJobDescription\"  validate={[]} component={FormFieldTextarea} />\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts</b>: {props.profile.contacts && Object.keys(props.profile.contacts)\r\n                .map(cont => {\r\n                    const a = props.profile?.contacts ? props.profile.contacts[cont as keyof UserProfileContactsType] : ''\r\n                    return <div className={style.contacts}>\r\n                            <b>{cont}: <div><Field placeholder={cont} name={\"contacts.\"+cont} validate={[]} component={FormFieldInput} /></div></b>\r\n                    </div>\r\n                })}\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormRedux = reduxForm<ProfileFormDataType, { profile: UserProfileType }>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormRedux;","import React, { useState } from \"react\";\r\nimport style from './ProfileInfo.module.css';\r\nimport { UserProfileContactsType, UserProfileType } from \"../ProfileContainer\";\r\nimport Preloader from \"../../common/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport UserPhoto from '../../../images/images.png'\r\nimport ProfileDataForm, {ProfileFormDataType} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: UserProfileType | null\r\n    status: string\r\n    saveProfile: (profile:UserProfileType) => void\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType & { isOwner: boolean, savePhoto: (e: File) => void }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n\r\n    }\r\n    let profile = '';\r\n\r\n    if (props.profile.photos) {\r\n        profile = props.profile.photos.large;\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileFormDataType) => {\r\n    \r\n        props.saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className={style.profile}>\r\n                <img\r\n                    src={profile || UserPhoto}\r\n                    alt={'profile'}\r\n                    className={style.avatar}\r\n                />\r\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n                {!editMode ? <ProfileData profile ={props.profile} isOwner={props.isOwner} goToEditMode = {() => {setEditMode(true)}}/> : <ProfileDataForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}  /> }\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: {profile: UserProfileType} & {isOwner: boolean, goToEditMode: () => void} ) => {\r\n    return  <div>\r\n        {isOwner && <div><button onClick ={goToEditMode} >edit</button></div>}\r\n    <div>\r\n        Full name: {profile.fullName}\r\n    </div>\r\n    <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n    </div>\r\n    <div>\r\n        About Me: {profile.aboutMe}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n    }\r\n    <div>\r\n        <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts)\r\n            .map(cont => {\r\n                const a = profile?.contacts ? profile.contacts[cont as keyof UserProfileContactsType] : ''\r\n                return <Contact key={cont} contactTitle={cont} contactValue={a} />\r\n            })}\r\n    </div>\r\n\r\n</div>\r\n}\r\n\r\nexport const Contact = ({ contactTitle, contactValue }: { contactTitle: string, contactValue: string | null }) => {\r\n    return <div className={style.contacts}><b>{contactTitle}</b>: {contactValue} </div>\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport style from './Post.module.css';\r\n\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img alt={'post'} src='https://static8.depositphotos.com/1207999/1027/i/450/depositphotos_10275824-stock-photo-business-man-avatar-in-suit.jpg' />\r\n            {props.message}\r\n            <div>\r\n                {`like ${props.likesCount}`}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport style from './MyPosts.module.css';\r\nimport Post, {PostType} from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthValidator, required} from \"../../../utils/validators/validators\";\r\nimport {FormFieldTextarea} from \"../../../utils/formControls/FormsControls\";\r\n\r\n\r\nexport type MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (post: string) => void\r\n}\r\n\r\nexport type MyPostFormType = {\r\n    post: string\r\n}\r\n\r\nlet maxLengthVal = maxLengthValidator(15)\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log(\"render\")\r\n    let postsElements =\r\n        props.posts.map(p => {\r\n            return <Post key={p.id + p.message} id={p.id} message={p.message} likesCount={p.likesCount}/>\r\n        })\r\n\r\n    let addPost = (propsForm: MyPostFormType) => {\r\n        props.addPost(propsForm.post);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <MyPostFormRedux onSubmit = {addPost}/>\r\n            <div className={style.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<MyPostFormType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name = {'post'}\r\n                   placeholder = 'enter message'\r\n                   component = {FormFieldTextarea}\r\n                   validate = {[required,maxLengthVal]}\r\n\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n\r\n    </form>\r\n}\r\n\r\nconst MyPostFormRedux = reduxForm<MyPostFormType>({form: 'myPostForm'})(MyPostForm)\r\n\r\nexport default MyPosts;","import {addPostActionCreator, AddPostActionType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreType} from \"../../../redux/redux-store\";\r\n\r\n// type MyPostsContainerType = {\r\n//     profilePage:  ProfilePageType\r\n//     dispatch: (action: AddPostActionType) => void\r\n// }\r\n\r\nconst mapStateToProps = (store: ReduxStoreType) => {\r\n    return {\r\n        posts: store.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action:  AddPostActionType) => void) => {\r\n    return {\r\n        addPost: (post: string) => dispatch(addPostActionCreator(post)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfilePageType,UserProfileType} from \"./ProfileContainer\";\r\n\r\n\r\nconst Profile = (props: UserProfilePageType & {isOwner: boolean, savePhoto: (e: File) => void, saveProfile:(profile: UserProfileType)=>void} ) => {\r\n    \r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.userProfile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner = {props.isOwner}\r\n                         saveProfile ={props.saveProfile}\r\n                         savePhoto = {props.savePhoto}\r\n                         />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReduxStoreType} from \"../../redux/redux-store\";\r\nimport {UsersPhotoApiType} from \"../Users/UsersContainer\";\r\nimport {getStatus, setMyUserProfile, updateStatus,savePhoto,saveProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nexport type UserProfileContactsType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    twitter: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\nexport type UserProfileType = {\r\n    aboutMe?: string\r\n    contacts?: UserProfileContactsType\r\n    fullName?: string\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    photos?: UsersPhotoApiType\r\n    userId?: string\r\n}\r\n\r\nexport type UserProfilePageType = {\r\n    userProfile: UserProfileType | null\r\n    userId: number\r\n    isAuth: boolean\r\n    status: string\r\n    setMyUserProfile: (userID: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType & {savePhoto: (photo: File) => void, saveProfile:(profile: UserProfileType)=>void}> {\r\n\r\n    \r\n    \r\n    refreshProfile(){\r\n        let userID = this.props.match.params.userID;\r\n        if (!userID) {\r\n            userID = ''+this.props.userId;\r\n            if(!userID) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.setMyUserProfile(userID);\r\n        this.props.getStatus(userID)\r\n    }\r\n\r\n    componentDidMount() {\r\n       this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps:PropsType) {\r\n        if(this.props.match.params.userID !== prevProps.match.params.userID){\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner = {!this.props.match.params.userID} savePhoto={this.props.savePhoto} saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n\r\n}\r\ntype PathParamsType = {\r\n    userID: string,\r\n}\r\n\r\n// RouteComponentProps необходимо для оборачивания компоненты для withRouter\r\ntype PropsType = RouteComponentProps<PathParamsType> & UserProfilePageType\r\n\r\n\r\nlet mapStateToProps = (store: ReduxStoreType) => ({\r\n    userProfile: store.profilePage.userProfile,\r\n    isAuth: store.auth.isAuth,\r\n    userId: store.auth.userId,\r\n    status: store.profilePage.status\r\n})\r\n\r\n\r\n// compose()() - принимает функции, кот оборачивают нашу комп в обр порядке и саму компоненту(т.е. наша компонента прогоняется от withAuthRedirect до посл connect и возвр HOC с результатом цепочки)\r\nexport default compose(connect(mapStateToProps, {setMyUserProfile, getStatus, updateStatus, savePhoto, saveProfile}), withRouter,withAuthRedirect)(ProfileContainer) as React.ComponentType\r\n\r\n\r\n\r\n//let RedirectAuthComponent = withAuthRedirect<PropsType>(ProfileContainer);\r\n// let mapStateToPropsForRedirect = (store: ReduxStoreType) => ({\r\n//     isAuth: store.auth.isAuth,\r\n// })\r\n//\r\n// let RedirectComponentWithAuth = connect(mapStateToPropsForRedirect)(RedirectAuthComponent);\r\n//export default connect(mapStateToProps, {setMyUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}