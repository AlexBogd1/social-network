{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialodsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","style","dialog","active","activeClassName","to","name","Message","message","maxLengthMessage","maxLengthValidator","DialogsFormReducer","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","validate","required","component","FormFieldTextarea","Dialogs","dialogsElements","dialogPage","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","formData","onSendMessageClick","compose","connect","store","dispatch","sendMessageCreator","withArrowFuncAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uGCsBpMC,EAZI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,yBAAKC,UAAWC,IAAMC,OAAS,IAAMD,IAAME,QACvC,kBAAC,IAAD,CAASC,gBAAmBH,IAAME,OAAQE,GAAIP,GAAOD,EAAMS,QCGxDC,EATC,SAACV,GACb,OACI,yBAAKG,UAAWC,IAAMO,SAAUX,EAAMW,U,kCCM1CC,EAAmBC,YAAmB,IA2CpCC,EAAqBC,YAA2B,CAACC,KAAM,eAAlCD,EAZR,SAACf,GAChB,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOV,KAAM,UAAWW,YAAa,gBAAiBC,SAAY,CAACC,IAASV,GAAmBW,UAAaC,OAEhH,6BACI,qDAODC,EA3CC,SAACzB,GAEb,IAAI0B,EAAkB1B,EAAM2B,WAAWC,QAClCC,KAAI,SAAAC,GACD,OAAO,kBAAC,EAAD,CAAYC,IAAKD,EAAErB,KAAKqB,EAAE5B,GAAIO,KAAMqB,EAAErB,KAAMP,GAAI4B,EAAE5B,QAG7D8B,EAAmBhC,EAAM2B,WAAWM,SAASJ,KAAI,SAAAK,GACjD,OAAO,kBAAC,EAAD,CAASH,IAAKG,EAAEhC,GAAKgC,EAAEvB,QAAST,GAAIgC,EAAEhC,GAAIS,QAASuB,EAAEvB,aAQhE,OACI,yBAAKR,UAAWC,IAAMwB,SAClB,yBAAKzB,UAAWC,IAAM+B,cACjBT,GAEL,yBAAKvB,UAAWC,IAAM6B,UAClB,6BAAMD,GACN,kBAAClB,EAAD,CAAoBG,SAZP,SAACmB,GACtBpC,EAAMqC,mBAAmBD,EAASzB,e,eCX3B2B,sBACXC,aAdoB,SAACC,GACpB,MAAO,CACHb,WAAYa,EAAMb,eAIA,SAACc,GACxB,MAAO,CACHJ,mBAAoB,SAAC1B,GAAD,OAAqB8B,EAASC,YAAmB/B,SAOzEgC,IAFWL,CAEgBb","file":"static/js/4.ecb7dbc7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__IP9VL\",\"dialogsItems\":\"Dialogs_dialogsItems__32c2y\",\"active\":\"Dialogs_active__2eJjP\",\"dialog\":\"Dialogs_dialog__3LZ_Y\",\"messages\":\"Dialogs_messages__Zs_gg\",\"message\":\"Dialogs_message__273Oy\"};","import React from \"react\";\r\nimport style from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={style.dialog + ' ' + style.active}>\r\n            <NavLink activeClassName = {style.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport style from './../Dialogs.module.css'\r\n\r\n\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={style.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialodsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/state\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormFieldTextarea} from \"../../utils/formControls/FormsControls\";\r\nimport {maxLengthValidator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nexport type DialogsType = {\r\n    dialogPage: DialogsPageType\r\n    onSendMessageClick: (message: string) => void\r\n}\r\nexport type DialogsFormType = {\r\n    message: string\r\n}\r\n\r\nlet maxLengthMessage = maxLengthValidator(30)\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    let dialogsElements = props.dialogPage.dialogs\r\n        .map(d => {\r\n            return <DialogItem key={d.name+d.id} name={d.name} id={d.id}/>\r\n        })\r\n\r\n    let messagesElements = props.dialogPage.messages.map(m => {\r\n        return <Message key={m.id + m.message} id={m.id} message={m.message}/>\r\n    })\r\n\r\n    let onSendMessageClick = (formData: DialogsFormType) => {\r\n        props.onSendMessageClick(formData.message)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                <div>{messagesElements}</div>\r\n                <DialogsFormReducer onSubmit = {onSendMessageClick}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DialogForm = (props: InjectedFormProps<DialogsFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'message'} placeholder={'enter message'} validate = {[required,maxLengthMessage]} component = {FormFieldTextarea}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst DialogsFormReducer = reduxForm<DialogsFormType>({form: 'dialogsForm'})(DialogForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {SendMessageActionType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {ReduxStoreType} from \"../../redux/redux-store\";\r\nimport {withArrowFuncAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (store: ReduxStoreType) =>{\r\n     return { \r\n         dialogPage: store.dialogPage,\r\n        }\r\n    }\r\n\r\nconst mapDispatchToProps = (dispatch: (action:  SendMessageActionType) => void) => {\r\n    return {\r\n        onSendMessageClick: (message: string) => dispatch(sendMessageCreator(message)),\r\n    }\r\n\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withArrowFuncAuthRedirect)(Dialogs);\r\n\r\n\r\n\r\n// const mapStateToPropsForRedirect = (store: ReduxStoreType) =>{\r\n//     return {\r\n//         isAuth: store.auth.isAuth\r\n//     }\r\n// }\r\n//\r\n// let AuthRedirectComponentWithAuth = connect(mapStateToPropsForRedirect)(AuthRedirectComponent);\r\n//\r\n// let DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponentWithAuth);"],"sourceRoot":""}